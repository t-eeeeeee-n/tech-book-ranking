
services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: techbook-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-changeme123}
      MONGO_INITDB_DATABASE: techbook-ranking
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - techbook-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: techbook-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/techbook-ranking?authSource=admin
      - QIITA_TOKEN=${QIITA_TOKEN}
      - AMAZON_ACCESS_KEY=${AMAZON_ACCESS_KEY}
      - AMAZON_SECRET_KEY=${AMAZON_SECRET_KEY}
      - AMAZON_ASSOCIATE_TAG=${AMAZON_ASSOCIATE_TAG}
      - AMAZON_REGION=${AMAZON_REGION:-us-east-1}
      - AMAZON_ENDPOINT=${AMAZON_ENDPOINT:-webservices.amazon.com}
      - API_KEYS=${API_KEYS:-production-api-key-2024}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - CRON_TIMEZONE=${CRON_TIMEZONE:-UTC}
      - QIITA_DEFAULT_QUERY=${QIITA_DEFAULT_QUERY:-created:>2024-01-01 stocks:>3}
      - ENABLE_CRON_JOBS=${ENABLE_CRON_JOBS:-true}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_DEFAULT_CHANNEL=${SLACK_DEFAULT_CHANNEL:-#techbook-alerts}
      - ENABLE_SLACK_NOTIFICATIONS=${ENABLE_SLACK_NOTIFICATIONS:-true}
    ports:
      - "3001:3001"
    networks:
      - techbook-network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Nuxt 3 Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: techbook-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - NUXT_PUBLIC_API_KEY=${NUXT_PUBLIC_API_KEY:-production-api-key-2024}
      - NUXT_PUBLIC_BACKEND_URL=http://backend:3001
      - BACKEND_API_KEY=${API_KEYS:-production-api-key-2024}
    ports:
      - "3000:3000"
    networks:
      - techbook-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Cron Service (Optional - runs scheduled tasks)
  cron:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: techbook-cron
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/techbook-ranking?authSource=admin
      - QIITA_TOKEN=${QIITA_TOKEN}
      - AMAZON_ACCESS_KEY=${AMAZON_ACCESS_KEY}
      - AMAZON_SECRET_KEY=${AMAZON_SECRET_KEY}
      - AMAZON_ASSOCIATE_TAG=${AMAZON_ASSOCIATE_TAG}
      - AMAZON_REGION=${AMAZON_REGION:-us-east-1}
      - AMAZON_ENDPOINT=${AMAZON_ENDPOINT:-webservices.amazon.com}
      - CRON_TIMEZONE=${CRON_TIMEZONE:-UTC}
      - QIITA_DEFAULT_QUERY=${QIITA_DEFAULT_QUERY:-created:>2024-01-01 stocks:>3}
      - ENABLE_CRON_JOBS=true
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_DEFAULT_CHANNEL=${SLACK_DEFAULT_CHANNEL:-#techbook-alerts}
      - ENABLE_SLACK_NOTIFICATIONS=${ENABLE_SLACK_NOTIFICATIONS:-true}
    command: ["node", "dist/cronApp.js"]
    networks:
      - techbook-network
    volumes:
      - cron_logs:/app/logs
    profiles:
      - cron
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node.*cronApp.js"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: techbook-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - techbook-network
    profiles:
      - nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  techbook-network:
    driver: bridge
    name: techbook-network

# Volumes
volumes:
  mongodb_data:
    name: techbook-mongodb-data
  backend_logs:
    name: techbook-backend-logs
  cron_logs:
    name: techbook-cron-logs
  nginx_logs:
    name: techbook-nginx-logs