name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test

jobs:
  # Frontend CI
  frontend:
    name: Frontend CI (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./frontend

    strategy:
      matrix:
        node-version: [20]  # Temporary: Node 18 not compatible with latest Nuxt 3
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --timeout=600000

    - name: Build frontend
      run: npm run build

    - name: Generate static site
      run: npm run generate

  # Backend CI
  backend:
    name: Backend CI (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./backend

    strategy:
      matrix:
        node-version: [20]  # Temporary: Focus on Node 20 for stability
      fail-fast: false

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand(\"ping\").ok' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./backend/package-lock.json

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --timeout=600000

    # Temporarily disable linting to focus on core functionality
    # - name: Run linting
    #   run: npm run lint || echo "Lint errors found but continuing..."
    #   continue-on-error: true

    - name: Run type checking
      run: npm run typecheck

    - name: Build backend
      run: npm run build

    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        MONGODB_URL: mongodb://root:password@localhost:27017/test?authSource=admin
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20'
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Docker build test (CI only, no deploy)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [frontend, backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: tech-book-ranking-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: tech-book-ranking-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Validate docker-compose configuration
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.yml config

  # PR quality gate summary
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: always()

    steps:
    - name: Check job results
      run: |
        if [[ "${{ needs.frontend.result }}" == "failure" || "${{ needs.backend.result }}" == "failure" ]]; then
          echo "❌ Quality gate failed - Frontend: ${{ needs.frontend.result }}, Backend: ${{ needs.backend.result }}"
          exit 1
        else
          echo "✅ Quality gate passed - All checks successful"
        fi